{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Head from 'next/head';\nimport { Form, Input, Checkbox, Button } from 'antd'; // useCallback으로 감싸주는 이유\n//함수컴포넌트가 스테이트가 바뀔때마다 전체가  통쨰로 재실행되면서 함수들이 새로 생성된다 !!\n//그것이 뜻하는 바는 ? 함수를전달받은 자신컴포넌트들은 , 렌더링을 다시한다는것.\n//함수도 객체기때문에 새로생성되면 다른객체가 되는데, 그러면 의도치 않은 리렌더링이 발생하기 때문에,\n//자식컴포넌트에 전달하는 함수는 전부 useCallback으로 감싸줘야 한다.\n\nvar signup = function signup() {\n  var _useState = useState(''),\n      passCheck = _useState[0],\n      setPassCheck = _useState[1];\n\n  var _useState2 = useState(false),\n      term = _useState2[0],\n      setTerm = _useState2[1];\n\n  var _useState3 = useState(false),\n      passwordError = _useState3[0],\n      setPasswordError = _useState3[1];\n\n  var _useState4 = useState(false),\n      termError = _useState4[0],\n      setTermError = _useState4[1]; // 커스텀 훅.\n\n\n  var useInput = function useInput() {\n    var initValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    var _useState5 = useState(initValue),\n        value = _useState5[0],\n        setter = _useState5[1];\n\n    var handler = useCallback(function (e) {\n      setter(e.target.value);\n    }, []);\n    return [value, handler];\n  };\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      id = _useInput2[0],\n      onChangeId = _useInput2[1];\n\n  var _useInput3 = useInput(''),\n      _useInput4 = _slicedToArray(_useInput3, 2),\n      nick = _useInput4[0],\n      onChangeNick = _useInput4[1];\n\n  var _useInput5 = useInput(''),\n      _useInput6 = _slicedToArray(_useInput5, 2),\n      password = _useInput6[0],\n      onChangePass = _useInput6[1];\n\n  var onSubmit = useCallback(function (e) {\n    e.preventDefault();\n    console.log({\n      id: id,\n      nick: nick,\n      password: password,\n      passCheck: passCheck,\n      term: term\n    });\n\n    if (password !== passCheck) {\n      return setPasswordError(true);\n    }\n\n    if (!term) {\n      return setTermError(true);\n    }\n  }, [password, passCheck, term]); //함수내부에 쓰이는 State들을 dependency배열에 넣어준다.\n  //props로 값을 전달 받을때, 하위요소에있는 놈이. 화면 전체가 리렌더링 되는 것을 막기 위해 useCallBack을 쓴다?\n  //커스텀훅만들어서 더이상 안쓴다.\n  // const onChangeId = (e) => {\n  //     setId(e.target.value);\n  // };\n  // const onChangeNick = (e) => {\n  //     setNick(e.target.value);\n  // };\n  // const onChangePass = (e) => {\n  //     setPass(e.target.value);\n  // };\n\n  var onChangePassCheck = useCallback(function (e) {\n    setPasswordError(e.target.value !== password);\n    setPassCheck(e.target.value);\n  }, [password]);\n  var onChagneTerm = useCallback(function (e) {\n    setTermError(false);\n    setTerm(e.target.checked);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"node bird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"\n  })), __jsx(AppLayout, null, __jsx(Form, {\n    onSubmit: onSubmit,\n    stype: {\n      padding: 10\n    }\n  }, __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-id\"\n  }, \"id\"), __jsx(Input, {\n    name: \"user-id\",\n    value: id,\n    required: true,\n    onChange: onChangeId\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-nick\"\n  }, \"nickname\"), __jsx(Input, {\n    name: \"user-nick\",\n    value: nick,\n    required: true,\n    onChange: onChangeNick\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-pass\"\n  }, \"password\"), __jsx(Input, {\n    name: \"user-pass\",\n    type: \"password\",\n    value: password,\n    required: true,\n    onChange: onChangePass\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    htmlFor: \"user-pass-chk\"\n  }, \"confirm pass\"), __jsx(Input, {\n    name: \"user-pass-chk\",\n    type: \"password\",\n    value: passCheck,\n    required: true,\n    onChange: onChangePassCheck\n  }), passwordError && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\")), __jsx(\"div\", null, __jsx(Checkbox, {\n    name: \"user-term\",\n    value: term,\n    onChange: onChagneTerm\n  }, \"\\uBE14\\uB77C\\uBE14\\uB77C \\uB0B4\\uC6A9\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\"), termError && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    }\n  }, \"\\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD558\\uC154\\uC57C \\uD569\\uB2C8\\uB2E4.\")), __jsx(\"div\", {\n    stype: {\n      marginTop: 10\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"\\uAC00\\uC785\\uD558\\uAE30\")))));\n};\n\nexport default signup;","map":null,"metadata":{},"sourceType":"module"}